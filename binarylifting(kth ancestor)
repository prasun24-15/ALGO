class TreeAncestor {
    vector<vector<int>> up;
    int LOG = 0;
    vector<int> depth;
    vector<vector<int>> adj;

    void dfs(int node, int par) {
        for (int child : adj[node]) {
            if (child == par) continue;
            depth[child] = depth[node] + 1;
            dfs(child, node);
        }
    }

public:
    TreeAncestor(int n, vector<int>& parent) {
        while ((1 << LOG) <= n) LOG++;

        depth = vector<int>(n);
        up = vector<vector<int>>(n, vector<int>(LOG, -1));
        adj = vector<vector<int>>(n);

        int root = -1;

        for (int i = 0; i < n; i++) {
            if (parent[i] == -1) {
                root = i;
            } else {
                adj[parent[i]].push_back(i);
                adj[i].push_back(parent[i]);
                up[i][0] = parent[i];
            }
        }
        up[root][0] = -1;
        dfs(root, -1);

        for (int j = 1; j < LOG; j++) {
            for (int i = 0; i < n; i++) {
                if (up[i][j - 1] != -1)
                    up[i][j] = up[up[i][j - 1]][j - 1];
            }
        }
    }

    int getKthAncestor(int node, int k) {
        if (depth[node] < k) return -1;

        for (int i = 0; i < LOG; i++) {
            if (k & (1 << i)) {
                node = up[node][i];
                if (node == -1) return -1;
            }
        }
        return node;
    }
};
